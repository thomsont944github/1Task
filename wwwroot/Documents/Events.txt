In c#, the event is a message sent by an object to indicate that particular action will happen.
Events are user actions such as key press, clicks, mouse movements, etc., 

Events are used to enable a class or object to notify other classes or objects about the action that is going to happen.

In .NET Framework, events are based on EventHandler delegate and an EventArgs base class.
To declare an event, we need to use event keyword with delegate type.

 Events use the publisher-subscriber model.
The events are declared and raised in a class and associated with the event handlers using delegates within the same class or some other class.

Publisher Class : The class containing the event is used to publish the event. This is called the publisher class.
Subscriber Class :Some other class that accepts this event is called the subscriber class. 

A publisher is an object that contains the definition of the event and the delegate.
A subscriber is an object that accepts the event and provides an event handler.

Using Delegates with Events
The delegate in the publisher class invokes the method (event handler) of the subscriber class.

Declaring Events
To declare an event inside a class, first of all, you must declare a delegate type for the even as:
public delegate string BoilerLogHandler(string str);

then, declare the event using the event keyword âˆ’
event BoilerLogHandler BoilerEventLog;

The preceding code defines a delegate named BoilerLogHandler and an event named BoilerEventLog, which invokes the delegate when it is raised.


Example:
public delegate void ButtonClickedHandler();
class Button
{
    public event ButtonClickedHandler ButtonClicked;
    ButtonClicked += ()=>{Console.WriteLine("click simulation !")};    
    public void SimulateClick()
    {
        if (ButtonClicked != null)
        {
            ButtonClicked();
        }
    }
    ...
}

A method in another class can then subscribe to the event by adding one of its methods to the event delegate:

Button b = new Button();
b.ButtonClicked += ButtonClickHandler;

private void ButtonClickHandler()
{
    //Handle the event
}











